package com.nuwarobotics.sdk.sample.tutorial

import android.Manifest
import androidx.appcompat.app.AppCompatActivity
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.content.ContextCompat
import com.nuwarobotics.service.IClientId
import com.nuwarobotics.service.agent.BnfData
import com.nuwarobotics.service.agent.NuwaRobotAPI
import com.nuwarobotics.service.agent.RobotEventListener
import com.nuwarobotics.service.agent.VoiceEventListener
import com.nuwarobotics.service.agent.VoiceEventListener.ListenType
import com.nuwarobotics.service.agent.VoiceEventListener.ResultType
import com.nuwarobotics.sdk.sample.tutorial.databinding.ActivityMainBinding

import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.launch

// TRTC SDK imports
import com.tencent.trtc.TRTCCloud
import com.tencent.trtc.TRTCCloudDef
import com.tencent.trtc.TRTCCloudListener
import com.tencent.rtmp.ui.TXCloudVideoView
import android.os.Bundle as TRTCBundle

class MainActivity : AppCompatActivity(), View.OnClickListener {

    companion object {
        private const val TAG = "anywhere_door"
        
        // 自定义消息命令ID定义（与app-android模块保持一致）
        private const val CMD_ID_DIRECTION = 1  // 方向控制命令
        private const val CMD_ID_STOP = 2       // 停止命令
        
        // 方向命令
        private const val DIRECTION_UP = "UP"
        private const val DIRECTION_DOWN = "DOWN"
        private const val DIRECTION_LEFT = "LEFT"
        private const val DIRECTION_RIGHT = "RIGHT"
        private const val DIRECTION_STOP = "STOP"
    }

    override fun onClick(v: View) {
        // Handle click events here
    }

    private lateinit var binding: ActivityMainBinding
    private lateinit var mTRTCCloud: TRTCCloud
    private lateinit var mRobot: NuwaRobotAPI
    private lateinit var mToast: Toast

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        mToast = Toast.makeText(this, "", Toast.LENGTH_SHORT)

        // init Nuwa Robot SDK with client_id and app_id which are generated by NUWA develop platform
        mRobot = NuwaRobotAPI(this, IClientId(packageName))

        // register Nuwa Robot Listener
        registerNuwaRobotListener()
        
        // register Voice Event Listener
        setupVoiceEventListener()

        // 创建 TRTC 实例
        mTRTCCloud = TRTCCloud.sharedInstance(applicationContext)
        mTRTCCloud.addListener(mTRTCCloudListener)

        requestNeededPermissions { connectToRoom() }

    }

    private fun showToast(message: String) {
        mToast.setText(message)
        mToast.show()
    }

    private fun registerNuwaRobotListener() {
        mRobot.registerRobotEventListener(object : RobotEventListener {
            override fun onWikiServiceStart() {
                Log.d(TAG, "onWikiServiceStart")
                showToast("onWikiServiceStart:")
                mRobot.startTTS("機器人準備好了")
                mRobot.hideWindow(false)

                mRobot.motionReset()
            }

            override fun onWikiServiceStop() {
                Log.d(TAG, "onWikiServiceStop")
            }

            override fun onWikiServiceCrash() {
                Log.d(TAG, "onWikiServiceCrash")
            }

            override fun onWikiServiceRecovery() {
                Log.d(TAG, "onWikiServiceRecovery")
            }

            override fun onStartOfMotionPlay(motion: String) {
                Log.d(TAG, "onStartOfMotionPlay:$motion")
                showToast("onStartOfMotionPlay:$motion")
            }

            override fun onPauseOfMotionPlay(motion: String) {
                Log.d(TAG, "onPauseOfMotionPlay:$motion")
            }

            override fun onStopOfMotionPlay(motion: String) {
                Log.d(TAG, "onStopOfMotionPlay:$motion")
                showToast("onStopOfMotionPlay:$motion")
            }

            override fun onCompleteOfMotionPlay(motion: String) {
                Log.d(TAG, "onCompleteOfMotionPlay:$motion")
                showToast("onCompleteOfMotionPlay:$motion")
                mRobot.hideWindow(false)
            }

            override fun onPlayBackOfMotionPlay(motion: String) {
                Log.d(TAG, "onPlayBackOfMotionPlay:$motion")
            }

            override fun onErrorOfMotionPlay(errorcode: Int) {
                Log.d(TAG, "onErrorOfMotionPlay:$errorcode")
                mRobot.hideWindow(false)
            }

            override fun onPrepareMotion(b: Boolean, s: String, v: Float) {
            }

            override fun onCameraOfMotionPlay(motion: String) {
                Log.d(TAG, "onCameraOfMotionPlay:$motion")
            }

            override fun onGetCameraPose(
                x: Float, y: Float, z: Float,
                Xx: Float, Yx: Float, Zx: Float,
                Xy: Float, Yy: Float, Zy: Float,
                Xz: Float, Yz: Float, Zz: Float
            ) {
            }

            override fun onTouchEvent(type: Int, touch: Int) {
                Log.d(TAG, "onTouchEvent:$type, touch:$touch")
            }

            override fun onPIREvent(value: Int) {
                Log.d(TAG, "onPIREvent:$value")
            }

            override fun onTap(body: Int) {
                Log.d(TAG, "onTap:$body")
            }

            override fun onLongPress(body: Int) {
                Log.d(TAG, "onLongPress:$body")
            }

            override fun onWindowSurfaceReady() {
                Log.d(TAG, "onWindowSurfaceReady")
            }

            override fun onWindowSurfaceDestroy() {
                Log.d(TAG, "onWindowSurfaceDestroy")
            }

            override fun onTouchEyes(eyeLR: Int, type: Int) {
                Log.d(TAG, "onTouchEyes:$eyeLR, type:$type")
            }

            override fun onRawTouch(i: Int, i1: Int, i2: Int) {
            }

            override fun onFaceSpeaker(direction: Float) {
                Log.d(TAG, "onFaceSpeaker:$direction")
            }

            override fun onActionEvent(i: Int, i1: Int) {
            }

            override fun onDropSensorEvent(i: Int) {
                Log.d(TAG, "onDropSensorEvent:$i")
            }

            override fun onMotorErrorEvent(i: Int, i1: Int) {
                Log.d(TAG, "onMotorErrorEvent:$i")
            }
        })
    }

    // TRTC 事件监听器
    private val mTRTCCloudListener = object : TRTCCloudListener() {
        override fun onError(errCode: Int, errMsg: String?, extraInfo: TRTCBundle?) {
            super.onError(errCode, errMsg, extraInfo)
            val notification = "Error Code: $errCode, Error Message: $errMsg, extraInfo: $extraInfo"
            showToast(notification)
            Log.e(TAG, notification)
        }

        override fun onEnterRoom(result: Long) {
            super.onEnterRoom(result)
            if (result > 0) {
                showToast("进房成功！")
                Log.d(TAG, "进房成功，耗时: ${result}ms")
                // 开启本地预览
                startLocalPreview()
            } else {
                showToast("进房失败！")
                Log.e(TAG, "进房失败，错误码: $result")
            }
        }

        override fun onUserVideoAvailable(userId: String?, available: Boolean) {
            super.onUserVideoAvailable(userId, available)
            if (available) {
                // 开始播放远端用户的视频流
                mTRTCCloud.startRemoteView(userId, TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_BIG, binding.renderer as TXCloudVideoView)
                binding.progress.visibility = View.GONE
                Log.d(TAG, "远端用户 $userId 开启了视频")
            } else {
                // 停止播放远端用户的视频流
                mTRTCCloud.stopRemoteView(userId, TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_BIG)
                Log.d(TAG, "远端用户 $userId 关闭了视频")
            }
        }

        override fun onUserAudioAvailable(userId: String?, available: Boolean) {
            super.onUserAudioAvailable(userId, available)
            Log.d(TAG, "远端用户 $userId 音频状态: $available")
        }
        
        override fun onRecvCustomCmdMsg(userId: String?, cmdId: Int, seq: Int, message: ByteArray?) {
            super.onRecvCustomCmdMsg(userId, cmdId, seq, message)
            Log.d(TAG, "收到来自 $userId 的自定义消息, cmdId: $cmdId")
            
            message?.let {
                val messageStr = String(it, Charsets.UTF_8)
                Log.d(TAG, "消息内容: $messageStr")
                
                when (cmdId) {
                    CMD_ID_DIRECTION -> {
                        handleDirectionCommand(messageStr)
                    }
                    CMD_ID_STOP -> {
                        handleStopCommand()
                    }
                    else -> {
                        Log.w(TAG, "未知的命令ID: $cmdId")
                    }
                }
            }
        }
    }

    private fun setupVoiceEventListener() {
        mRobot.registerVoiceEventListener(object : VoiceEventListener {
            override fun onWakeup(isError: Boolean, score: String, direction: Float) {
                Log.d(TAG, "onWakeup:${!isError}, score:$score")
                showToast("onWakeup:${!isError}, score:$score")
            }

            override fun onTTSComplete(isError: Boolean) {
                Log.d(TAG, "onTTSComplete${!isError}")
                showToast("onTTSComplete:${!isError}")
            }

            override fun onSpeechRecognizeComplete(isError: Boolean, iFlyResult: ResultType, json: String) {
                Log.d(TAG, "onSpeechRecognizeComplete:${!isError}, json:$json")
                showToast("雲端結果：$json")
            }

            override fun onSpeech2TextComplete(isError: Boolean, json: String) {
                Log.d(TAG, "onSpeech2TextComplete:${!isError}, json:$json")
                showToast("語音轉文字(語音輸入法)：$json")
            }

            override fun onSpeechState(type: ListenType, state: VoiceEventListener.SpeechState) {
                Log.d(TAG, "onSpeechState:$type, state:$state")
            }

            override fun onMixUnderstandComplete(isError: Boolean, iFlyResult: ResultType, json: String) {
                Log.d(TAG, "onMixUnderstandComplete:${!isError}, json:$json")
                if (!isError) {
                    if (iFlyResult == ResultType.LOCAL_COMMAND) {
                        showToast("local ASR:$json")
                    } else {
                        showToast("cloud ASR:$json")
                    }
                } else {
                    mRobot.startTTS("網路或訊飛不夠力")
                    showToast("網路或訊飛不夠力 $json")
                }
            }

            override fun onGrammarState(isError: Boolean, info: String) {
                Log.d(TAG, "onGrammarState:${!isError}, info:$info")
            }

            override fun onListenVolumeChanged(listenType: ListenType, volume: Int) {
            }

            override fun onSpeakState(type: VoiceEventListener.SpeakType, state: VoiceEventListener.SpeakState) {
                Log.d(TAG, "onSpeakState:$type, state:$state")
            }
        })
    }

    private fun connectToRoom() {
        // TRTC 进房参数配置
        val trtcParams = TRTCCloudDef.TRTCParams()
        trtcParams.sdkAppId = 1600096140  // 请替换为您的 sdkAppId
        trtcParams.userId = "keith"       // 用户ID
        trtcParams.userSig = "eJyrVgrxCdYrSy1SslIy0jNQ0gHzM1NS80oy0zLBwtmpmSUZUInilOzEgoLMFCUrQzMDAwNLM0MTA4hMakVBZlEqUNzU1NQIKAURLcnMBYmZA4XMTCxMjKGmZKYDzfXNCy0OrfA0MSquCkp39ojRN82zcEt0Dw9IDLN0DfItM6osrwgOT88MTy0zsFWqBQBenDH8"        // 请替换为您的 UserSig
        trtcParams.roomId = 12345        // 房间ID
        
        Log.d(TAG, "connectToRoom: roomId=${trtcParams.roomId}, userId=${trtcParams.userId}")
        
        // 进入房间
        mTRTCCloud.enterRoom(trtcParams, TRTCCloudDef.TRTC_APP_SCENE_LIVE)
    }

    // 开启本地预览
    private fun startLocalPreview() {
        // 设置本地渲染参数
        val renderParams = TRTCCloudDef.TRTCRenderParams()
        renderParams.fillMode = TRTCCloudDef.TRTC_VIDEO_RENDER_MODE_FILL
        renderParams.rotation = TRTCCloudDef.TRTC_VIDEO_ROTATION_0
        
        // 开启本地摄像头预览
        mTRTCCloud.setLocalRenderParams(renderParams)
        mTRTCCloud.startLocalPreview(true, binding.localCamera as TXCloudVideoView)
        
        // 开启本地音频采集
        mTRTCCloud.startLocalAudio(TRTCCloudDef.TRTC_AUDIO_QUALITY_DEFAULT)
        
        Log.d(TAG, "本地预览已开启")
    }
    
    /**
     * 处理方向控制命令
     * @param direction 方向指令
     */
    private fun handleDirectionCommand(direction: String) {
        runOnUiThread {
            when (direction) {
                DIRECTION_UP -> {
                    showToast("执行向前移动")
                    Log.d(TAG, "执行向前移动指令")
                    // 使用Nuwa机器人SDK控制机器人向前移动
                    mRobot.move(0.2f)
                }
                DIRECTION_DOWN -> {
                    showToast("执行向后移动")
                    Log.d(TAG, "执行向后移动指令")
                    // 使用Nuwa机器人SDK控制机器人向后移动
                    mRobot.move(-0.2f)
                }
                DIRECTION_LEFT -> {
                    showToast("执行向左转")
                    Log.d(TAG, "执行向左转指令")
                    // 使用Nuwa机器人SDK控制机器人向左转
                    mRobot.turn(30f)
                }
                DIRECTION_RIGHT -> {
                    showToast("执行向右转")
                    Log.d(TAG, "执行向右转指令")
                    // 使用Nuwa机器人SDK控制机器人向右转
                    mRobot.turn(-30f)
                }
                else -> {
                    Log.w(TAG, "未知的方向指令: $direction")
                    showToast("未知的方向指令: $direction")
                }
            }
        }
    }
    
    /**
     * 处理停止命令
     */
    private fun handleStopCommand() {
        runOnUiThread {
            showToast("执行停止移动")
            Log.d(TAG, "执行停止移动指令")
            // 使用Nuwa机器人SDK停止机器人运动
            mRobot.move(0f)
            mRobot.turn(0f)
            // 重置机器人姿态
            mRobot.motionReset()
        }
    }

    private fun requestNeededPermissions(onHasPermissions: () -> Unit) {
        val requestPermissionLauncher =
            registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { grants ->
                var hasDenied = false
                // Check if any permissions weren't granted.
                for (grant in grants.entries) {
                    if (!grant.value) {
                        showToast("Missing permission: ${grant.key}")
                        Log.d(TAG, "requestNeededPermissions: ${grant.key}")
                        hasDenied = true
                    }
                }

                if (!hasDenied) {
                    onHasPermissions()
                }
            }

        // Assemble the needed permissions to request
        val neededPermissions = listOf(Manifest.permission.RECORD_AUDIO, Manifest.permission.CAMERA)
            .filter { ContextCompat.checkSelfPermission(this, it) == PackageManager.PERMISSION_DENIED }
            .toTypedArray()

        Log.d(TAG, "requestNeededPermissions: ${neededPermissions.joinToString(", ")}")

        if (neededPermissions.isNotEmpty()) {
            requestPermissionLauncher.launch(neededPermissions)
        } else {
            onHasPermissions()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        // 停止本地预览
        mTRTCCloud.stopLocalPreview()
        // 停止本地音频
        mTRTCCloud.stopLocalAudio()
        // 退出房间
        mTRTCCloud.exitRoom()
        // 移除监听器
        mTRTCCloud.removeListener(mTRTCCloudListener)
        // 销毁 TRTC 实例
        TRTCCloud.destroySharedInstance()
    }
}

